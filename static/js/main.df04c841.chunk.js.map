{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","inputText","setTodos","todos","setStatus","className","onSubmit","e","preventDefault","text","completed","id","Math","random","value","onChange","target","type","Todo","item","onClick","filter","todo","map","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveToLocal","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df04c841.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({ setInputText, inputText, setTodos, todos, setStatus }) => {\n\n    const inputHandler = e => {\n        setInputText(e.target.value);\n    };\n\n    const submitHandler = e => {\n        e.preventDefault();\n        setTodos([\n            ...todos, \n            {\n                text: inputText,\n                completed: false,\n                id: Math.random() * 1000\n            }\n        ]);\n        setInputText(\"\");\n    };\n\n    const statusHandler = e => {\n        setStatus(e.target.value);\n    };\n    \n\n    return(\n        <div className=\"Form\">\n            <form onSubmit={submitHandler}>\n                <input \n                    value={inputText}\n                    onChange={inputHandler}\n                    type=\"text\"\n                />\n                <button type=\"submit\">go</button>\n            </form>\n\n            <select onChange={statusHandler}>\n                <option value=\"all\">all</option>\n                <option value=\"completed\">completed</option>\n                <option value=\"uncompleted\">uncompleted</option>\n            </select>\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Todo = ({ text, setTodos, todos, item }) => {\n\n    const deleteHandler = () => {\n        setTodos(todos.filter(todo => todo.id !== item.id));\n    };\n\n    const completeHandler = () => {\n        setTodos(todos.map(todo => {\n            if (todo.id === item.id) {\n                return {\n                    ...todo, completed: !todo.completed\n                }\n            }\n            return todo;\n        }));\n    };\n    \n\n    return(\n        <div className=\"Todo\">\n            <li className={item.completed ? \"strikethrough\" : \"\"} >\n                {text}\n                <button onClick={deleteHandler}>Trash</button>\n                <button onClick={completeHandler}>{item.completed ? \"Undone\" : \"Done\"}</button>\n            </li>\n        </div>\n    )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n    return(\n        <div className=\"TodoList\">\n            <ul>\n                {filteredTodos.map(item => (\n                    <Todo \n                        text={item.text}\n                        key={item.id}\n                        item={item}\n                        todos={todos}\n                        setTodos={setTodos}\n                    />\n                ))}\n                \n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList;","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveToLocal();\n  }, [status, todos]);\n\n  const filterHandler = () => {\n    switch(status) {\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  const saveToLocal = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let localTodos = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(localTodos);\n    }\n  };\n\n  \n\n  return(\n    <div className=\"App\">\n      <h1>Tin's To Do List</h1>\n      <div className=\"Form\">\n        <Form \n          setInputText={setInputText} \n          inputText={inputText}\n          setTodos={setTodos}\n          todos={todos}\n          setStatus={setStatus}\n        />\n        <TodoList \n          todos={todos}\n          setTodos={setTodos}\n          filteredTodos={filteredTodos}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}